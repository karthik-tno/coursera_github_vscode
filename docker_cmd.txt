docker run hello-world
docker images
docker run hello-world
docker ps
docker ps -a
mkdir test && cd test

Create a Dockerfile:
    cat > Dockerfile <<EOF
    # Use an official Node runtime as the parent image
    FROM node:lts
    # Set the working directory in the container to /app
    WORKDIR /app
    # Copy the current directory contents into the container at /app
    ADD . /app
    # Make the container's port 80 available to the outside world
    EXPOSE 80
    # Run app.js using node when the container launches
    CMD ["node", "app.js"]
    EOF

Run the following to create the node application:
    cat > app.js <<EOF
    const http = require('http');
    const hostname = '0.0.0.0';
    const port = 80;
    const server = http.createServer((req, res) => {
        res.statusCode = 200;
        res.setHeader('Content-Type', 'text/plain');
        res.end('Hello World\n');
    });
    server.listen(port, hostname, () => {
        console.log('Server running at http://%s:%s/', hostname, port);
    });
    process.on('SIGINT', function() {
        console.log('Caught interrupt signal and will exit');
        process.exit();
    });
    EOF
This is a simple HTTP server that listens on port 80 and returns "Hello World". Now build the image.

Use this code to run containers based on the image you built:
    docker run -p 4000:80 --name my-app node-app:0.1

Close the initial terminal and then run the following command to stop and remove the container:
    docker stop my-app && docker rm my-app

Now run the following command to start the container in the background:
    docker run -p 4000:80 --name my-app -d node-app:0.1
    docker ps

Notice the container is running in the output of docker ps. You can look at the logs by executing docker logs [container_id].
    docker logs [container_id]

You can look at the logs of a container using docker logs [container_id]. If you want to follow the log's output as the container is running, use the -f option.
    docker logs -f [container_id]

You can use docker exec to do this. Open another terminal (in Cloud Shell, click the + icon) and enter the following command:
    docker exec -it [container_id] bash

You can examine a container's metadata in Docker by using Docker inspect:
    docker inspect [container_id]

Use --format to inspect specific fields from the returned JSON. For example:
    docker inspect --format='{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}' [container_id]

To push images to your private registry hosted by Artifact Registry, you need to tag the images with a registry name.
The format is <regional-repository>-docker.pkg.dev/my-project/my-repo/my-image.

Push the container to Artifact Registry
Run the following commands to set your Project ID and change into the directory with your Dockerfile.
    export PROJECT_ID=$(gcloud config get-value project)
    cd ~/test

Run the command to tag node-app:0.2.
    docker build -t us-central1-docker.pkg.dev/$PROJECT_ID/my-repository/node-app:0.2 .

Run the following command to check your built Docker images.
    docker images

Push this image to Artifact Registry.
    docker push us-central1-docker.pkg.dev/$PROJECT_ID/my-repository/node-app:0.2

